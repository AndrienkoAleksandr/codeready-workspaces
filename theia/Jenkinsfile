#!/usr/bin/env groovy

// PARAMETERS for this pipeline:
// branchToBuildCRW = codeready-workspaces branch to build: */2.0.x or */master
// branchToBuildCheTheia = che-theia branch to build: refs/tags/7.0.0, */7.1.x, or */master
// che_theia_version = master
// che_theia_tag = next
// che_theia_branch = master
// che_theia_gitref = refs/heads/master
// node == slave label, eg., rhel7-devstudio-releng-16gb-ram||rhel7-16gb-ram||rhel7-devstudio-releng||rhel7 or rhel7-32gb||rhel7-16gb||rhel7-8gb
// GITHUB_TOKEN = (github token)

def installNPM(){
	def nodeHome = tool 'nodejs-10.15.3'
	env.PATH="${nodeHome}/bin:${env.PATH}"
	sh "node --version; npm --version"
}

timeout(120) {
	node("${node}"){ stage "Build Theia"
		cleanWs()
		// for private repo, use checkout(credentialsId: 'devstudio-release')
		checkout([$class: 'GitSCM',
				  branches: [[name: "${branchToBuildCRW}"]],
				  doGenerateSubmoduleConfigurations: false,
				  poll: true,
				  extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "crw"]],
				  submoduleCfg: [],
				  userRemoteConfigs: [[url: "https://github.com/redhat-developer/codeready-workspaces.git"]]])
		checkout([$class: 'GitSCM',
				  branches: [[name: "${branchToBuildCheTheia}"]],
				  doGenerateSubmoduleConfigurations: false,
				  poll: true,
				  extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "che-theia"]],
				  submoduleCfg: [],
				  userRemoteConfigs: [[url: "https://github.com/eclipse/che-theia.git"]]])
		installNPM()
		//sh '''#!/bin/bash -xe
		//'''
		sh "export GITHUB_TOKEN=${GITHUB_TOKEN}"
		sh 'printenv | sort'

		// TODO replace Alpine with UBI
		// sh "cp crw/dockerfiles/che-theia/Dockerfile che-theia/dockerfiles/theia/Dockefile"

		// CRW-360 use RH NPM mirror
		sh "sed -i 's|https://registry.yarnpkg.com/|https://repository.engineering.redhat.com/nexus/repository/registry.npmjs.org/|g' che-theia/yarn.lock"
		sh "sed -i 's|https://registry.yarnpkg.com/|https://repository.engineering.redhat.com/nexus/repository/registry.npmjs.org/|g' che-theia/generator/tests/production/assembly/yarn.lock"

		// TODO make this a for loop or split into stages
		sh "cd che-theia; ./build.sh"
		// sh "cd che-theia/dockerfiles/theia-dev && ./build.sh --no-tests --build-args:GITHUB_TOKEN=${GITHUB_TOKEN},THEIA_VERSION=${che_theia_version} --tag:${che_theia_tag} --branch:${che_theia_branch} --git-ref:${che_theia_gitref}"
		// sh "cd che-theia/dockerfiles/theia-endpoint-runtime && ./build.sh --no-tests --build-args:GITHUB_TOKEN=${GITHUB_TOKEN},THEIA_VERSION=${che_theia_version} --tag:${che_theia_tag} --branch:${che_theia_branch} --git-ref:${che_theia_gitref}"
		// sh "cd che-theia/dockerfiles/remote-plugin-java8 && ./build.sh --no-tests --build-args:GITHUB_TOKEN=${GITHUB_TOKEN},THEIA_VERSION=${che_theia_version} --tag:${che_theia_tag} --branch:${che_theia_branch} --git-ref:${che_theia_gitref}"
		// sh "cd che-theia/dockerfiles/remote-plugin-openshift-connector-0.0.21 && ./build.sh --no-tests --build-args:GITHUB_TOKEN=${GITHUB_TOKEN},THEIA_VERSION=${che_theia_version} --tag:${che_theia_tag} --branch:${che_theia_branch} --git-ref:${che_theia_gitref}"

		// TODO tar up the node modules so we can build inject them into the Brew builds?
		// archiveArtifacts fingerprint: true, artifacts: "crw/**/*.tar.*, crw/**/node_modules/**"

		def descriptString="Build #${BUILD_NUMBER} (${BUILD_TIMESTAMP}) <br/> :: ${che_theia_version}, ${che_theia_tag}, ${che_theia_branch}"
		echo "${descriptString}"
		currentBuild.description="${descriptString}"
	}
}

// TODO enable downstream image builds
// timeout(120) {
// 	node("${node}"){ stage "Run get-sources-rhpkg-container-build"
// 		def QUAY_REPO_PATHs=(env.ghprbPullId && env.ghprbPullId?.trim()?"":("${SCRATCH}"=="true"?"":"server-rhel8"))

// 		def matcher = ( "${JOB_NAME}" =~ /.*_(stable-branch|master).*/ )
// 		def JOB_BRANCH= (matcher.matches() ? matcher[0][1] : "stable-branch")

// 		echo "[INFO] Trigger get-sources-rhpkg-container-build " + (env.ghprbPullId && env.ghprbPullId?.trim()?"for PR-${ghprbPullId} ":"") + \
// 		"with SCRATCH = ${SCRATCH}, QUAY_REPO_PATHs = ${QUAY_REPO_PATHs}, JOB_BRANCH = ${JOB_BRANCH}"

// 		// trigger OSBS build
// 		build(
// 		  job: 'get-sources-rhpkg-container-build',
// 		  wait: false,
// 		  propagate: false,
// 		  parameters: [
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'GIT_PATH',
// 			  value: "containers/codeready-workspaces",
// 			],
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'GIT_BRANCH',
// 			  value: "crw-2.0-rhel-8",
// 			],
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'QUAY_REPO_PATHs',
// 			  value: "${QUAY_REPO_PATHs}",
// 			],
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'SCRATCH',
// 			  value: "${SCRATCH}",
// 			],
// 			[
// 			  $class: 'StringParameterValue',
// 			  name: 'JOB_BRANCH',
// 			  value: "${JOB_BRANCH}",
// 			]
// 		  ]
// 		)
// 	}
// }
